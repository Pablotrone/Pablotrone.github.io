// ===============================================
// –ê–†–ì–£–° –õ–û–£ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú SWIPER
// –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø - –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–≤–∞–π–ø–µ—Ä–æ–º
// ===============================================

'use strict';

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –§–ò–ß–ï–ô ===
const FEATURES = {
    authentication: false,
    imageOptimization: false
};

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let verticalSwiper = null;
let horizontalSwiper = null;
let isMouseOverHorizontal = false;
let horizontalScrollLock = false;
let keyboardLock = false;
let swiperInitAttempts = 0;
let maxSwiperInitAttempts = 5;

// === –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
const AppState = {
    initialized: false,
    initializationAttempts: 0,
    maxInitAttempts: 5,
    swiperReady: false
};

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
const ArgusApp = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async init() {
        if (AppState.initialized) {
            console.log('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            return;
        }

        AppState.initializationAttempts++;
        console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Argus Law (–ø–æ–ø—ã—Ç–∫–∞ ${AppState.initializationAttempts})...`);

        try {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Swiper
            await this.waitForSwiper();
            
            this.initializeComponents();
            AppState.initialized = true;
            console.log('‚úÖ Argus Law —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            if (AppState.initializationAttempts < AppState.maxInitAttempts) {
                setTimeout(() => this.init(), 1000);
            }
        }
    },

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Swiper
    async waitForSwiper() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥
            
            const checkSwiper = () => {
                attempts++;
                
                if (typeof Swiper !== 'undefined') {
                    console.log('‚úÖ Swiper –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                    AppState.swiperReady = true;
                    resolve();
                } else if (window.swiperReady) {
                    console.log('‚úÖ Swiper –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ fallback');
                    AppState.swiperReady = true;
                    resolve();
                } else if (attempts >= maxAttempts) {
                    console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Swiper');
                    reject(new Error('Swiper not loaded'));
                } else {
                    setTimeout(checkSwiper, 100);
                }
            };
            
            checkSwiper();
        });
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    initializeComponents() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        
        this.initializeSwiper();
        this.setupNavigation();
        this.setupKeyboardControls();
        this.setupFloatingHeader();
        this.initializeOptionalFeatures();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        setTimeout(() => {
            this.handleInitialNavigation();
        }, 800);

        console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    },

    // === –£–õ–£–ß–®–ï–ù–ù–ê–Ø SWIPER –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    initializeSwiper() {
        console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper...');
        
        const sliderElement = document.querySelector('.slider');
        if (!sliderElement) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç .slider –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Swiper
        if (!AppState.swiperReady) {
            console.warn('‚ö†Ô∏è Swiper –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
            setTimeout(() => this.initializeSwiper(), 500);
            return;
        }

        try {
            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            this.destroyVerticalSwiper();

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            verticalSwiper = new Swiper('.slider', {
                direction: 'vertical',
                speed: 1700,
                parallax: true,
                resistanceRatio: 0.5,
                touchReleaseOnEdges: true,
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                watchSlidesProgress: true,
                watchSlidesVisibility: true,
                preventInteractionOnTransition: false,
                
                keyboard: {
                    enabled: false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É
                },
                mousewheel: {
                    eventsTarget: '.slider',
                    releaseOnEdges: true,
                    thresholdDelta: 15,
                    thresholdTime: 300,
                    sensitivity: 1,
                    eventsTarget: '.slider'
                },
                noSwipingSelector: '.horizontal-swiper, .slide-content, .swiper-pagination, .swiper-button-next, .swiper-button-prev',
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                on: {
                    init: () => {
                        console.log('‚úÖ Vertical swiper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                        this.handleSlideChange(0);
                        this.triggerSectionAnimations(0);
                        
                        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                        this.fixImageScaling();
                    },
                    slideChange: () => {
                        const activeIndex = verticalSwiper.activeIndex;
                        console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–∞–π–¥:', activeIndex);
                        
                        this.handleSlideChange(activeIndex);
                        this.triggerSectionAnimations(activeIndex);
                        this.updateURLHash(activeIndex);
                        
                        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                        this.fixImageScaling();
                    },
                    resize: () => {
                        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
                        this.fixImageScaling();
                    }
                }
            });

            console.log('‚úÖ Swiper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Swiper:', error);
            swiperInitAttempts++;
            
            if (swiperInitAttempts < maxSwiperInitAttempts) {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Swiper (${swiperInitAttempts}/${maxSwiperInitAttempts})`);
                setTimeout(() => this.initializeSwiper(), 1000);
            }
        }
    },

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    fixImageScaling() {
        try {
            const slides = document.querySelectorAll('.slider__item');
            const layers = document.querySelectorAll('.slider__layer');
            
            slides.forEach((slide, index) => {
                const layer = slide.querySelector('.slider__layer');
                if (layer) {
                    // –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    layer.style.transform = '';
                    layer.style.scale = '';
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
                    if (slide.classList.contains('swiper-slide-active')) {
                        layer.style.transform = 'scale(1.1)';
                    } else {
                        layer.style.transform = 'scale(1)';
                    }
                }
            });
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
            document.body.offsetHeight;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    },

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–≤–∞–π–ø–µ—Ä–∞
    destroyVerticalSwiper() {
        if (verticalSwiper) {
            try {
                verticalSwiper.destroy(true, true);
                console.log('üóëÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π swiper —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ swiper:', error);
            }
            verticalSwiper = null;
        }
    },

    triggerSectionAnimations(sectionIndex) {
        const sections = [
            '.header-content',
            '.about-section',
            '.horizontal-swiper-container',
            '.contacts-section'
        ];

        const currentSection = document.querySelector(sections[sectionIndex]);
        if (!currentSection) {
            console.warn('‚ö†Ô∏è –°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞:', sectionIndex);
            return;
        }

        // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        const allAnimatedElements = document.querySelectorAll('.animate-fade-up, .animate-slide-left, .animate-scale-up, .animate-contact');
        allAnimatedElements.forEach(el => el.classList.remove('animate'));

        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
        const animatedElements = currentSection.querySelectorAll('.animate-fade-up, .animate-slide-left, .animate-scale-up, .animate-contact');

        animatedElements.forEach((el, index) => {
            const delay = parseInt(el.dataset.delay) || (index * 100);
            setTimeout(() => {
                el.classList.add('animate');
            }, delay);
        });

        console.log('‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏:', sections[sectionIndex]);
    },

    handleSlideChange(activeIndex) {
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–ª–∞–π–¥–∞:', activeIndex);
        
        try {
            this.updateUIForSection(activeIndex);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∞–π–¥–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            document.querySelectorAll('.header-content__slide').forEach((slide, index) => {
                slide.classList.toggle('active', activeIndex === index);
            });

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–≤–∞–π–ø–µ—Ä–æ–º
            if (horizontalSwiper) {
                horizontalSwiper.destroy(true, true);
                horizontalSwiper = null;
                isMouseOverHorizontal = false;
                if (verticalSwiper) verticalSwiper.mousewheel.enable();
            }

            if (activeIndex === 2) {
                setTimeout(() => this.initHorizontalSwiper(), 200);
            }

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            if (activeIndex === 3) {
                setTimeout(() => {
                    this.ensureContactsState();
                }, 100);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–º–µ–Ω—ã —Å–ª–∞–π–¥–∞:', error);
        }
    },

    updateUIForSection(activeIndex) {
        console.log('üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è —Å–µ–∫—Ü–∏–∏:', activeIndex);
        
        const headerUI = document.querySelector('.slider-ui.home-only');
        const floatingHeader = document.getElementById('floatingHeader');
        
        if (headerUI && floatingHeader) {
            if (activeIndex === 0) {
                headerUI.classList.remove('hidden');
                headerUI.style.opacity = '1';
                headerUI.style.visibility = 'visible';
                
                if (window.innerWidth <= 968) {
                    floatingHeader.classList.add('visible');
                    floatingHeader.style.opacity = '1';
                    floatingHeader.style.visibility = 'visible';
                } else {
                    floatingHeader.classList.remove('visible');
                    floatingHeader.style.opacity = '0';
                    floatingHeader.style.visibility = 'hidden';
                }
            } else {
                headerUI.classList.add('hidden');
                headerUI.style.opacity = '0';
                headerUI.style.visibility = 'hidden';
                
                floatingHeader.classList.add('visible');
                floatingHeader.style.opacity = '1';
                floatingHeader.style.visibility = 'visible';
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
        const menuItems = document.querySelectorAll('.main-menu li');
        menuItems.forEach((item, index) => {
            let isActive = false;
            switch (index) {
                case 0: isActive = (activeIndex === 1); break;
                case 1: isActive = (activeIndex === 2); break;
                case 2: isActive = false; break;
                case 3: isActive = false; break;
                case 4: isActive = (activeIndex === 3); break;
            }
            item.classList.toggle('active', isActive);
        });

        const mobileMenuItems = document.querySelectorAll('.floating-menu li');
        mobileMenuItems.forEach((item, index) => {
            let isActive = false;
            switch (index) {
                case 0: isActive = (activeIndex === 0); break;
                case 1: isActive = (activeIndex === 1); break;
                case 2: isActive = (activeIndex === 2); break;
                case 3: isActive = false; break;
                case 4: isActive = false; break;
                case 5: isActive = (activeIndex === 3); break;
            }
            item.classList.toggle('active', isActive);
        });

        console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏', activeIndex);
    },

    setupNavigation() {
        console.log('üß≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        
        const logos = document.querySelectorAll('.logo, .floating-logo');
        logos.forEach(logo => {
            logo.addEventListener('click', (e) => {
                e.preventDefault();
                this.navigateToSection('#home');
            });
        });

        const internalLinks = document.querySelectorAll('a[href^="#"]:not(.external-link)');
        internalLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetSection = link.getAttribute('href');
                this.navigateToSection(targetSection);
                this.closeMobileMenu();
            });
        });

        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    },

    closeMobileMenu() {
        const floatingBurger = document.querySelector('.floating-burger');
        const floatingMenu = document.querySelector('.floating-menu');
        
        if (floatingBurger && floatingMenu) {
            floatingBurger.classList.remove('active');
            floatingMenu.classList.remove('show');
        }
    },

    navigateToSection(targetHash) {
        console.log('üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–µ–∫—Ü–∏–∏:', targetHash);
        
        const sectionMap = {
            '#home': 0,
            '#about': 1,
            '#practices': 2,
            '#contacts': 3
        };

        const slideIndex = sectionMap[targetHash];
        if (slideIndex !== undefined && verticalSwiper) {
            verticalSwiper.slideTo(slideIndex);

            if (window.location.hash !== targetHash) {
                window.history.replaceState(null, null, targetHash);
            }
        }
    },

    // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ö–õ–ê–í–ò–ê–¢–£–†–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
    setupKeyboardControls() {
        console.log('‚å®Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
        
        document.addEventListener('keydown', (e) => {
            if (keyboardLock) return;

            let handled = false;

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–≤–∞–π–ø–µ—Ä–æ–º
            if (isMouseOverHorizontal && horizontalSwiper) {
                switch (e.key) {
                    case 'ArrowLeft':
                        keyboardLock = true;
                        horizontalSwiper.slidePrev();
                        handled = true;
                        break;
                    case 'ArrowRight':
                        keyboardLock = true;
                        horizontalSwiper.slideNext();
                        handled = true;
                        break;
                    case 'Home':
                        keyboardLock = true;
                        horizontalSwiper.slideTo(0);
                        handled = true;
                        break;
                    case 'End':
                        keyboardLock = true;
                        horizontalSwiper.slideTo(horizontalSwiper.slides.length - 1);
                        handled = true;
                        break;
                }
            }
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å–≤–∞–π–ø–µ—Ä–æ–º
            else if (!isMouseOverHorizontal && verticalSwiper) {
                switch (e.key) {
                    case 'ArrowUp':
                    case 'PageUp':
                        keyboardLock = true;
                        verticalSwiper.slidePrev();
                        handled = true;
                        break;
                    case 'ArrowDown':
                    case 'PageDown':
                        keyboardLock = true;
                        verticalSwiper.slideNext();
                        handled = true;
                        break;
                    case 'Home':
                        keyboardLock = true;
                        verticalSwiper.slideTo(0);
                        handled = true;
                        break;
                    case 'End':
                        keyboardLock = true;
                        verticalSwiper.slideTo(3);
                        handled = true;
                        break;
                }
            }

            if (handled) {
                e.preventDefault();
                e.stopPropagation();
                
                setTimeout(() => {
                    keyboardLock = false;
                }, 600);
            }
        });
        
        console.log('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    },

    setupFloatingHeader() {
        console.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞...');
        
        const floatingBurger = document.querySelector('.floating-burger');
        const floatingMenu = document.querySelector('.floating-menu');
        
        if (floatingBurger && floatingMenu) {
            floatingBurger.addEventListener('click', () => {
                floatingBurger.classList.toggle('active');
                floatingMenu.classList.toggle('show');
            });
            
            document.addEventListener('click', (e) => {
                if (!floatingBurger.contains(e.target) && !floatingMenu.contains(e.target)) {
                    floatingBurger.classList.remove('active');
                    floatingMenu.classList.remove('show');
                }
            });
        }
    },

    initializeOptionalFeatures() {
        if (FEATURES.authentication) {
            this.initializeAuthentication();
        }
        if (FEATURES.imageOptimization) {
            this.initializeImageOptimizer();
        }
    },

    initializeAuthentication() {
        console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    },

    initializeImageOptimizer() {
        console.log('üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    },

    // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–´–ô –°–í–ê–ô–ü–ï–† ===
    initHorizontalSwiper() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–≤–∞–π–ø–µ—Ä–∞...');
        
        const horizontalEl = document.querySelector('.horizontal-swiper');
        if (!horizontalEl) return;

        if (horizontalSwiper) {
            try {
                horizontalSwiper.destroy(true, true);
            } catch (error) {
                console.warn('Warning destroying horizontal swiper:', error);
            }
            horizontalSwiper = null;
        }

        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ mousewheel —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            horizontalSwiper = new Swiper('.horizontal-swiper', {
                direction: 'horizontal',
                slidesPerView: 1,
                centeredSlides: true,
                spaceBetween: 30,
                grabCursor: true,
                slideToClickedSlide: true,
                preventInteractionOnTransition: true,
                loop: true,
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
                mousewheel: {
                    enabled: false, // –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    releaseOnEdges: true,
                    sensitivity: 1,
                    thresholdDelta: 10,
                    thresholdTime: 300,
                },
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                keyboard: {
                    enabled: false, // –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    onlyInViewport: true,
                },
                
                autoplay: {
                    delay: 4000,
                    disableOnInteraction: false,
                    pauseOnMouseEnter: true,
                },
                pagination: {
                    el: '.horizontal-swiper .swiper-pagination',
                    clickable: true,
                    dynamicBullets: true,
                    dynamicMainBullets: 3,
                },
                navigation: {
                    nextEl: '.horizontal-swiper .swiper-button-next',
                    prevEl: '.horizontal-swiper .swiper-button-prev',
                }
            });

            this.setupHorizontalSwiperEvents(horizontalEl);
            console.log('‚úÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå Error initializing horizontal swiper:', error);
        }
    },

    // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–û–ë–´–¢–ò–Ø –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û–ì–û –°–í–ê–ô–ü–ï–†–ê ===
    setupHorizontalSwiperEvents(horizontalEl) {
        if (!horizontalEl || !verticalSwiper) return;

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–≤–∞–π–ø–µ—Ä–∞
        horizontalEl.addEventListener('mouseenter', () => {
            console.log('üñ±Ô∏è –ú—ã—à—å –Ω–∞–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–≤–∞–π–ø–µ—Ä–æ–º');
            isMouseOverHorizontal = true;
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø–µ—Ä
            if (verticalSwiper) {
                verticalSwiper.mousewheel.disable();
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–≤–∞–π–ø–µ—Ä–æ–º
            if (horizontalSwiper) {
                horizontalSwiper.mousewheel.enable();
                horizontalSwiper.keyboard.enable();
                
                if (horizontalSwiper.autoplay) {
                    horizontalSwiper.autoplay.stop();
                }
            }
        });

        horizontalEl.addEventListener('mouseleave', () => {
            console.log('üñ±Ô∏è –ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø–µ—Ä');
            isMouseOverHorizontal = false;
            
            // –í–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø–µ—Ä
            if (verticalSwiper) {
                verticalSwiper.mousewheel.enable();
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–≤–∞–π–ø–µ—Ä–æ–º
            if (horizontalSwiper) {
                horizontalSwiper.mousewheel.disable();
                horizontalSwiper.keyboard.disable();
                
                if (horizontalSwiper.autoplay) {
                    horizontalSwiper.autoplay.start();
                }
            }
        });

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        horizontalEl.addEventListener('wheel', (e) => {
            if (isMouseOverHorizontal) {
                e.stopPropagation();
            }
        });

        horizontalEl.addEventListener('keydown', (e) => {
            if (isMouseOverHorizontal && ['ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(e.key)) {
                e.stopPropagation();
            }
        });
    },

    updateURLHash(activeIndex) {
        const hashMap = {0: '#home', 1: '#about', 2: '#practices', 3: '#contacts'};
        const newHash = hashMap[activeIndex];
        if (newHash && window.location.hash !== newHash) {
            window.history.replaceState(null, null, newHash);
        }
    },

    handleInitialNavigation() {
        console.log('üß≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        
        const isExternalNavigation = sessionStorage.getItem('external_navigation') === 'true';
        const storedNavigateTarget = sessionStorage.getItem('navigate_to');
        const hash = window.location.hash;
        
        if (isExternalNavigation) {
            sessionStorage.removeItem('external_navigation');
        }
        
        if (storedNavigateTarget) {
            sessionStorage.removeItem('navigate_to');
            const targetHash = '#' + storedNavigateTarget;
            const delay = isExternalNavigation ? 2500 : 1500;
            
            setTimeout(() => {
                this.navigateToSection(targetHash);
            }, delay);
            return;
        }
        
        if (hash && hash !== '#home') {
            const delay = isExternalNavigation ? 2000 : 1000;
            setTimeout(() => {
                this.navigateToSection(hash);
            }, delay);
        }
    },

    ensureContactsState() {
        console.log('üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...');
        
        const floatingHeader = document.getElementById('floatingHeader');
        if (floatingHeader) {
            floatingHeader.classList.add('visible');
            floatingHeader.style.opacity = '1';
            floatingHeader.style.visibility = 'visible';
        }

        const homeHeader = document.querySelector('.slider-ui.home-only');
        if (homeHeader) {
            homeHeader.classList.add('hidden');
        }

        if (verticalSwiper && verticalSwiper.activeIndex !== 3) {
            verticalSwiper.slideTo(3, 0);
        }

        setTimeout(() => {
            this.triggerSectionAnimations(3);
        }, 50);
    },

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    restart() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        this.destroyVerticalSwiper();
        
        if (horizontalSwiper) {
            try {
                horizontalSwiper.destroy(true, true);
            } catch (error) {
                console.warn('Warning destroying horizontal swiper:', error);
            }
            horizontalSwiper = null;
        }
        
        AppState.initialized = false;
        AppState.initializationAttempts = 0;
        swiperInitAttempts = 0;
        keyboardLock = false;
        isMouseOverHorizontal = false;
        
        this.init();
    }
};

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
window.triggerSectionAnimations = (sectionIndex) => ArgusApp.triggerSectionAnimations(sectionIndex);
window.navigateToSection = (section) => ArgusApp.navigateToSection(section);
window.ensureContactsState = () => ArgusApp.ensureContactsState();
window.resetApp = () => ArgusApp.restart();
window.ArgusApp = ArgusApp;

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
document.addEventListener('preloaderComplete', function() {
    console.log('üé¨ –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    ArgusApp.init();
});

document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
        if (!AppState.initialized) {
            console.log('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é...');
            ArgusApp.init();
        }
    }, 12000);
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (verticalSwiper) {
        verticalSwiper.destroy(true, true);
    }
    if (horizontalSwiper) {
        horizontalSwiper.destroy(true, true);
    }
});

console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Argus Law –∑–∞–≥—Ä—É–∂–µ–Ω–∞');